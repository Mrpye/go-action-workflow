#cloud-config
write_files:
  - path: /usr/local/bin/wait-for-node-ready.sh
    permissions: "0755"
    owner: root:root
    content: |
      #!/bin/sh
      until (curl -sL http://localhost:10248/healthz) && [ $(curl -sL http://localhost:10248/healthz) = "ok" ];
        do sleep 10 && echo "Wait for $(hostname) kubelet to be ready"; done;=

  - path: /etc/rancher/rke2/config.yaml
    permissions: "0600"
    owner: root:root
    content: |
      token: "Kizov0oc_{XZ-)]L?E[k8J*YLf]!B<[B$+${[$R:)kL==T6Gs:Q5SLfFQB48Ojv1"

      write-kubeconfig-mode: "0640"
      tls-san:
        - "10.22.60.114"
        - "10.22.60.114"
        
      kube-apiserver-arg: "kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname"

  - path: /var/lib/rancher/rke2/server/manifests/metallb-native.yaml
    permissions: "0600"
    owner: root:root
    encoding: b64
    content: ""

package_update: false
packages:
  - iptables

runcmd:
  - export INSTALL_RKE2_VERSION=v1.24.4+rke2r1
  - curl -sfL https://get.rke2.io | sh -

  - systemctl enable rke2-server.service
  - systemctl start rke2-server.service
  - [
      sh,
      -c,
      "until [ -f /etc/rancher/rke2/rke2.yaml ]; do echo Waiting for rke2 to start && sleep 10; done;",
    ]
  - [
      sh,
      -c,
      "until [ -x /var/lib/rancher/rke2/bin/kubectl ]; do echo Waiting for kubectl bin && sleep 10; done;",
    ]
  - cp /etc/rancher/rke2/rke2.yaml /etc/rancher/rke2/rke2-remote.yaml
  - sudo chgrp sudo /etc/rancher/rke2/rke2-remote.yaml
  - KUBECONFIG=/etc/rancher/rke2/rke2-remote.yaml /var/lib/rancher/rke2/bin/kubectl config set-cluster default --server https://10.22.60.114:6443
  - KUBECONFIG=/etc/rancher/rke2/rke2-remote.yaml /var/lib/rancher/rke2/bin/kubectl config rename-context default Rancher-AP
  - cp /etc/rancher/rke2/rke2-remote.yaml /etc/rancher/rke2/rke2-kubeconfig.yaml
  - sudo chown metsi:metsi /etc/rancher/rke2/rke2-kubeconfig.yaml
